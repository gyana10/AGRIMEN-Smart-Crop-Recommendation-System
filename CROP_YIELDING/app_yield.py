import streamlit as st
import pandas as pd
import joblib

# Load trained model artifacts
model = joblib.load("models/crop_yield_model.pkl")
scaler = joblib.load("models/yield_scaler.pkl")
le_crop = joblib.load("models/crop_label_encoder.pkl")
le_season = joblib.load("models/season_label_encoder.pkl")
le_state = joblib.load("models/state_label_encoder.pkl")

# Translation dictionary with full translations
translations = {
    "en": {
        "title": "ЁЯМ╛ AGRIMEN тАУ Smart Crop Yield Prediction",
        "welcome": "Welcome! Predict crop yield based on soil & climate data.",
        "manual_input": "ЁЯУЭ Manual Input Prediction",
        "predict_btn": "ЁЯМ▒ Predict Yield",
        "bulk_prediction": "ЁЯУВ Bulk Prediction (CSV/Excel Upload)",
        "required_cols": "ЁЯСЙ Required Columns: Crop, Crop_Year, Season, State, Area, Production, Annual_Rainfall, Fertilizer, Pesticide",
        "results": "ЁЯУК Predicted Yield",
        "unit": "tons per hectare",
        "download": "ЁЯУе Download Results as CSV"
    },
    "hi": {
        "title": "ЁЯМ╛ AGRIMEN тАУ рд╕реНрдорд╛рд░реНрдЯ рдлрд╕рд▓ рдЙрддреНрдкрд╛рджрди рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА",
        "welcome": "рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдорд┐рдЯреНрдЯреА рдФрд░ рдЬрд▓рд╡рд╛рдпреБ рдбреЗрдЯрд╛ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдлрд╕рд▓ рдЙрддреНрдкрд╛рджрди рдХрд╛ рдЕрдиреБрдорд╛рди рд▓рдЧрд╛рдПрдБред",
        "manual_input": "ЁЯУЭ рдореИрдиреБрдЕрд▓ рдЗрдирдкреБрдЯ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
        "predict_btn": "ЁЯМ▒ рдЙрддреНрдкрд╛рджрди рдЕрдиреБрдорд╛рдирд┐рдд рдХрд░реЗрдВ",
        "bulk_prediction": "ЁЯУВ рдмрд▓реНрдХ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди (CSV/Excel рдЕрдкрд▓реЛрдб)",
        "required_cols": "ЁЯСЙ рдЖрд╡рд╢реНрдпрдХ рдХреЙрд▓рдо: Crop, Crop_Year, Season, State, Area, Production, Annual_Rainfall, Fertilizer, Pesticide",
        "results": "ЁЯУК рдЕрдиреБрдорд╛рдирд┐рдд рдЙрддреНрдкрд╛рджрди",
        "unit": "рдЯрди рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░",
        "download": "ЁЯУе рдкрд░рд┐рдгрд╛рдо CSV рдХреЗ рд░реВрдк рдореЗрдВ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ"
    },
    "or": {
        "title": "ЁЯМ╛ AGRIMEN тАУ рм╕рнНрморм╛рм░рнНрмЯ рмХрнНрм░рмкрнН рнЯрм┐рм▓рнНрмб рмкрнНрм░рм┐рмбрм┐рмХрнНрм╕рмирнН",
        "welcome": "рмормЯрм┐ рмУ рмЖрммрм╣рм╛ рмдрмернНрнЯ рмЙрмкрм░рнЗ рмЖрмзрм╛рм░ рмХрм░рм┐ рмХрнНрм░рмкрнН рнЯрм┐рм▓рнНрмб рмкрнНрм░рм┐рмбрм┐рмХрнНрм╕рмирнН рмХрм░рмирнНрмдрнБред",
        "manual_input": "ЁЯУЭ рморм╛рмирнБрмЖрм▓ рмЗрмирмкрнБрмЯ рмкрнНрм░рм┐рмбрм┐рмХрнНрм╕рмирнН",
        "predict_btn": "ЁЯМ▒ рмкрнНрм░рм┐рмбрм┐рмХрнНрм╕рмирнН рмХрм░рмирнНрмдрнБ",
        "bulk_prediction": "ЁЯУВ рммрм▓рнНрмХ рмкрнНрм░рм┐рмбрм┐рмХрнНрм╕рмирнН (CSV/Excel рмЕрмкрм▓рнЛрмбрнН)",
        "required_cols": "ЁЯСЙ рмЖрммрм╢рнНрнЯрмХ рмХрм▓рморнНрм╕: Crop, Crop_Year, Season, State, Area, Production, Annual_Rainfall, Fertilizer, Pesticide",
        "results": "ЁЯУК рмкрнНрм░рм┐рмбрм┐рмХрнНрмЯ рмХрнГрмд рнЯрм┐рм▓рнНрмб",
        "unit": "рмЯрмирнН рмкрнНрм░рмдрм┐ рм╣рнЗрмХрнНрмЯрнЗрм░рнН",
        "download": "ЁЯУе рмкрм░рм┐рмгрм╛рмо рмбрм╛рмЙрмирм▓рнЛрмбрнН рмХрм░рмирнНрмдрнБ"
    },
    "te": {
        "title": "ЁЯМ╛ AGRIMEN тАУ р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░кр░Вр░Я р░жр░┐р░Чр▒Бр░мр░бр░┐ р░Ер░Вр░Ър░ир░╛",
        "welcome": "р░╕р▒Нр░╡р░╛р░Чр░др░В! р░ор░Яр▒Нр░Яр░┐р░др░др▒Нр░╡р░В р░ор░░р░┐р░пр▒Б р░╡р░╛р░др░╛р░╡р░░р░гр░В р░Жр░зр░╛р░░р░Вр░Чр░╛ р░кр░Вр░Я р░жр░┐р░Чр▒Бр░мр░бр░┐ р░Ер░Вр░Ър░ир░╛.",
        "manual_input": "ЁЯУЭ р░ор░╛р░ир▒Нр░пр▒Бр░╡р░▓р▒Н р░Зр░ир▒НтАМр░кр▒Бр░Яр▒Н р░Ер░Вр░Ър░ир░╛",
        "predict_btn": "ЁЯМ▒ р░жр░┐р░Чр▒Бр░мр░бр░┐ р░Ер░Вр░Ър░ир░╛ р░╡р▒Зр░пр░Вр░бр░┐",
        "bulk_prediction": "ЁЯУВ р░мр░▓р▒Нр░Хр▒Н р░Ер░Вр░Ър░ир░╛ (CSV/Excel р░Ер░кр▒Нр░▓р▒Лр░бр▒Н)",
        "required_cols": "ЁЯСЙ р░Ер░╡р░╕р░░р░ор▒Ир░и р░Хр░╛р░▓р░ор▒Нр░╕р▒Н: Crop, Crop_Year, Season, State, Area, Production, Annual_Rainfall, Fertilizer, Pesticide",
        "results": "ЁЯУК р░Ер░Вр░Ър░ир░╛ р░╡р▒Зр░╢р░╛р░░р▒Б р░жр░┐р░Чр▒Бр░мр░бр░┐",
        "unit": "р░Яр░ир▒Нр░ир▒Бр░▓р▒Б р░кр▒Нр░░р░др░┐ р░╣р▒Жр░Хр▒Нр░Яр▒Зр░░р▒Б",
        "download": "ЁЯУе р░лр░▓р░┐р░др░╛р░▓р░ир▒Б CSV р░Чр░╛ р░бр▒Мр░ир▒Нр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐"
    },
    "ta": {
        "title": "ЁЯМ╛ AGRIMEN тАУ ро╕рпНрооро╛ро░рпНроЯрпН рокропро┐ро░рпН ро╡ро┐ро│рпИро╡рпБ роХрогро┐рокрпНрокрпБ",
        "welcome": "ро╡ро░ро╡рпЗро▒рпНрокрпБ! роиро┐ро▓роорпН рооро▒рпНро▒рпБроорпН роХро╛ро▓роиро┐ро▓рпИ родро░ро╡ро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН рокропро┐ро░рпН ро╡ро┐ро│рпИро╡рпИ роХрогро┐роХрпНроХро╡рпБроорпН.",
        "manual_input": "ЁЯУЭ роХрпИроорпБро▒рпИ роЙро│рпНро│рпАроЯрпНроЯрпБ роХрогро┐рокрпНрокрпБ",
        "predict_btn": "ЁЯМ▒ ро╡ро┐ро│рпИро╡рпБ роХрогро┐роХрпНроХро╡рпБроорпН",
        "bulk_prediction": "ЁЯУВ родрпКроХрпБрокрпНрокрпБ роХрогро┐рокрпНрокрпБ (CSV/Excel рокродро┐ро╡рпЗро▒рпНро▒роорпН)",
        "required_cols": "ЁЯСЙ родрпЗро╡рпИрокрпНрокроЯрпБроорпН рокродрпНродро┐роХро│рпН: Crop, Crop_Year, Season, State, Area, Production, Annual_Rainfall, Fertilizer, Pesticide",
        "results": "ЁЯУК роХрогро┐роХрпНроХрокрпНрокроЯрпНроЯ ро╡ро┐ро│рпИро╡рпБ",
        "unit": "роЯройрпН роТройрпНро▒рпБроХрпНроХрпБ ро╣рпЖроХрпНроЯрпЗро░рпН",
        "download": "ЁЯУе роорпБроЯро┐ро╡рпБроХро│рпИ CSV роЖроХ рокродро┐ро╡ро┐ро▒роХрпНроХро╡рпБроорпН"
    },
    "ml": {
        "title": "ЁЯМ╛ AGRIMEN тАУ р┤╕р╡Нр┤ор┤╛р╡╝р┤Яр╡Нр┤Яр╡Н р┤╡р┤┐р┤│р┤╡р╡Н р┤кр╡Нр┤░р┤╡р┤Ър┤ир┤В",
        "welcome": "р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В! р┤ор┤гр╡Нр┤гр╡Н & р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤╛ р┤бр┤╛р┤▒р╡Нр┤▒ р┤Ер┤Яр┤┐р┤╕р╡Нр┤ер┤╛р┤ир┤ор┤╛р┤Хр╡Нр┤Хр┤┐ р┤╡р┤┐р┤│р┤╡р╡Н р┤кр╡Нр┤░р┤╡р┤Ър┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
        "manual_input": "ЁЯУЭ р┤ор┤╛р┤ир╡Бр┤╡р╡╜ р┤Зр╡╗р┤кр╡Бр┤Яр╡Нр┤Яр╡Н р┤кр╡Нр┤░р┤╡р┤Ър┤и р┤лр╡Ар╡╜р┤бр╡Н",
        "predict_btn": "ЁЯМ▒ р┤╡р┤┐р┤│р┤╡р╡Н р┤кр╡Нр┤░р┤╡р┤Ър┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "bulk_prediction": "ЁЯУВ р┤мр╡╛р┤Хр╡Нр┤Хр╡Н р┤кр╡Нр┤░р┤╡р┤Ър┤ир┤В (CSV/Excel р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н)",
        "required_cols": "ЁЯСЙ р┤Жр┤╡р┤╢р╡Нр┤пр┤ор┤╛р┤п р┤Хр╡Лр┤│р┤Щр╡Нр┤Щр╡╛: Crop, Crop_Year, Season, State, Area, Production, Annual_Rainfall, Fertilizer, Pesticide",
        "results": "ЁЯУК р┤кр╡Нр┤░р┤╡р┤Ър┤┐р┤Ър╡Нр┤Ъ р┤╡р┤┐р┤│р┤╡р╡Н",
        "unit": "р┤Яр╡║р┤╕р╡Н р┤кр╡Нр┤░р┤др┤┐ р┤╣р╡Жр┤Хр╡Нр┤Яр╡╝",
        "download": "ЁЯУе р┤лр┤▓р┤Щр╡Нр┤Щр╡╛ CSV р┤Жр┤пр┤┐ р┤бр╡Чр╡║р┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х"
    },
    "bn": {
        "title": "ЁЯМ╛ AGRIMEN тАУ рж╕рзНржорж╛рж░рзНржЯ ржлрж╕рж▓ ржЙрзОржкрж╛ржжржи ржкрзВрж░рзНржмрж╛ржнрж╛рж╕",
        "welcome": "рж╕рзНржмрж╛ржЧрждржо! ржорж╛ржЯрж┐ ржПржмржВ ржЬрж▓ржмрж╛ржпрж╝рзБ рждржерзНржпрзЗрж░ ржнрж┐рждрзНрждрж┐рждрзЗ ржлрж╕рж▓рзЗрж░ ржЙрзОржкрж╛ржжржи ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ ржжрж┐ржиред",
        "manual_input": "ЁЯУЭ ржорзНржпрж╛ржирзБржпрж╝рж╛рж▓ ржЗржиржкрзБржЯ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕",
        "predict_btn": "ЁЯМ▒ ржЙрзОржкрж╛ржжржи ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ ржжрж┐ржи",
        "bulk_prediction": "ЁЯУВ ржмрзНржпрж╛ржЪ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ (CSV/Excel ржЖржкрж▓рзЛржб)",
        "required_cols": "ЁЯСЙ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржХрж▓рж╛ржо: Crop, Crop_Year, Season, State, Area, Production, Annual_Rainfall, Fertilizer, Pesticide",
        "results": "ЁЯУК ржкрзВрж░рзНржмрж╛ржнрж╛рж╕рж┐ржд ржЙрзОржкрж╛ржжржи",
        "unit": "ржЯржи ржкрзНрж░рждрж┐ рж╣рзЗржХрзНржЯрж░",
        "download": "ЁЯУе ржлрж▓рж╛ржлрж▓ CSV рж╣рж┐рж╕рж╛ржмрзЗ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи"
    }
}

# Page config
st.set_page_config(page_title="Crop Yield Prediction", page_icon="ЁЯМ╛", layout="wide")

# Language selection
lang_options = {
    "en": "English",
    "hi": "Hindi",
    "or": "Odia",
    "te": "Telugu",
    "ta": "Tamil",
    "ml": "Malayalam",
    "bn": "Bengali"
}

lang = st.sidebar.selectbox("ЁЯМР Select Language", options=list(lang_options.keys()), format_func=lambda x: lang_options[x])

# Ensure language change triggers rerun
if 'current_lang' not in st.session_state or st.session_state.current_lang != lang:
    st.session_state.current_lang = lang
    st.experimental_rerun()

T = translations[lang]

# Display UI
st.title(T["title"])
st.write(T["welcome"])

st.subheader(T["manual_input"])

col1, col2, col3 = st.columns(3)
with col1:
    crop = st.selectbox(T["manual_input"], options=le_crop.classes_)
    crop_year = st.number_input("Crop Year", 1997, 2025, 2020)
    season = st.selectbox("Season", options=le_season.classes_)
with col2:
    state = st.selectbox("State", options=le_state.classes_)
    area = st.number_input("Area (in hectares)", min_value=0.1, max_value=1e7, value=1000.0, step=0.1)
    production = st.number_input("Production (in kg)", min_value=0.0, max_value=1e10, value=5000.0, step=1.0)
with col3:
    annual_rainfall = st.number_input("Annual Rainfall (mm)", min_value=0.0, max_value=10000.0, value=1200.0, step=0.1)
    fertilizer = st.number_input("Fertilizer Used (kg)", min_value=0.0, max_value=1e8, value=50000.0, step=1.0)
    pesticide = st.number_input("Pesticide Used (kg)", min_value=0.0, max_value=1e7, value=1000.0, step=1.0)

if st.button(T["predict_btn"]):
    crop_enc = le_crop.transform([crop])[0]
    season_enc = le_season.transform([season])[0]
    state_enc = le_state.transform([state])[0]

    data = [[crop_enc, crop_year, season_enc, state_enc, area, production, annual_rainfall, fertilizer, pesticide]]
    data_scaled = scaler.transform(data)
    yield_pred = model.predict(data_scaled)[0]

    st.success(f"тЬЕ {T['results']}: {yield_pred:.2f} {T['unit']}")

st.subheader(T["bulk_prediction"])
st.write(T["required_cols"])

file = st.file_uploader("Upload CSV or Excel file", type=["csv", "xlsx"])

if file:
    if file.name.endswith('.csv'):
        df = pd.read_csv(file)
    else:
        df = pd.read_excel(file)

    required_cols = ['Crop', 'Crop_Year', 'Season', 'State', 'Area', 'Production', 'Annual_Rainfall', 'Fertilizer', 'Pesticide']
    if not all(col in df.columns for col in required_cols):
        st.error("тЭМ Missing required columns in the uploaded file.")
    else:
        df['Crop'] = le_crop.transform(df['Crop'])
        df['Season'] = le_season.transform(df['Season'])
        df['State'] = le_state.transform(df['State'])

        input_data = scaler.transform(df[required_cols])
        predictions = model.predict(input_data)

        df['Predicted_Yield'] = [f"{pred:.2f} {T['unit']}" for pred in predictions]

        st.write(T["results"])
        st.dataframe(df)

        csv = df.to_csv(index=False).encode('utf-8')
        st.download_button(label=T["download"], data=csv, file_name='predicted_yields.csv', mime='text/csv')
