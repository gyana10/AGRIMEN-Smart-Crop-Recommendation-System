import streamlit as st
import pandas as pd
import joblib


model = joblib.load("models/crop_model.pkl")
scaler = joblib.load("models/scaler.pkl")
le = joblib.load("models/label_encoder.pkl")



crop_info = {
    "rice": {"sowing": "June-July", "harvest": "Oct-Nov", "duration": "120-150 days"},
    "wheat": {"sowing": "Nov-Dec", "harvest": "Mar-Apr", "duration": "140-160 days"},
    "maize": {"sowing": "June-July", "harvest": "Sep-Oct", "duration": "90-120 days"},
    "barley": {"sowing": "Nov-Dec", "harvest": "Mar-Apr", "duration": "120-140 days"},
    "sorghum": {"sowing": "Jun-Jul", "harvest": "Sep-Oct", "duration": "100-120 days"},
    "millet": {"sowing": "Jun-Jul", "harvest": "Sep-Oct", "duration": "90-110 days"},
    "soybean": {"sowing": "Jun-Jul", "harvest": "Sep-Oct", "duration": "90-120 days"},
    "groundnut": {"sowing": "Jun-Jul", "harvest": "Sep-Oct", "duration": "100-120 days"},
    "mustard": {"sowing": "Oct-Nov", "harvest": "Feb-Mar", "duration": "120-130 days"},
    "cotton": {"sowing": "Apr-May", "harvest": "Oct-Nov", "duration": "150-180 days"},
    "sugarcane": {"sowing": "Feb-Mar", "harvest": "Nov-Dec", "duration": "270-365 days"},
    "tobacco": {"sowing": "Feb-Mar", "harvest": "Aug-Sep", "duration": "150-180 days"},
    "tea": {"sowing": "Jun-Jul", "harvest": "Dec-Feb", "duration": "180-210 days"},
    "coffee": {"sowing": "Jun-Jul", "harvest": "Dec-Feb", "duration": "180-210 days"},
    "banana": {"sowing": "Year-round", "harvest": "9-12 months", "duration": "270-365 days"},
    "mango": {"sowing": "Jul-Aug", "harvest": "Apr-Jun", "duration": "300+ days"},
    "orange": {"sowing": "Jun-Jul", "harvest": "Dec-Jan", "duration": "180-210 days"},
    "apple": {"sowing": "Jan-Feb", "harvest": "Sep-Oct", "duration": "150-180 days"},
    "grapes": {"sowing": "Dec-Jan", "harvest": "Apr-May", "duration": "120-150 days"},
    "coconut": {"sowing": "Year-round", "harvest": "6-10 years", "duration": "2190-3650 days"},
    "potato": {"sowing": "Oct-Nov", "harvest": "Jan-Feb", "duration": "90-120 days"},
    "tomato": {"sowing": "Sep-Oct", "harvest": "Dec-Jan", "duration": "90-100 days"}
}



crop_translations = {
    "wheat": {"en": "Wheat", "hi": "рдЧреЗрд╣реВрдБ", "or": "рмЧрм╣рмо", "te": "р░Чр▒Лр░зр▒Бр░о", "ta": "роХрпЛродрпБроорпИ", "ml": "р┤Чр╡Зрд╣реБрдБ", "bn": "ржЧржо"},
    "rice": {"en": "Rice", "hi": "рдЪрд╛рд╡рд▓", "or": "рмЪрм╛рмЙрм│", "te": "р░мр░┐р░пр▒Нр░пр░В", "ta": "роЕро░ро┐роЪро┐", "ml": "р┤Ер┤░р┤┐р┤кр╡Нр┤кр╡Н", "bn": "ржЪрж╛рж▓"},
    "maize": {"en": "Maize", "hi": "рдордХреНрдХрд╛", "or": "рмормХрм╛", "te": "р░ор░Хр▒Нр░Хр░╛", "ta": "роороХрпНроХро╛роЪрпНроЪрпЛро│роорпН", "ml": "р┤нр╡Вр┤Яр╡Нр┤Яр┤╛р╡╗", "bn": "ржоржХрж╛ржЗ"},
    "barley": {"en": "Barley", "hi": "рдЬреМ", "or": "рмЬрнМ", "te": "р░Ьр▒Кр░ир▒Нр░и", "ta": "рокро╛ро░рпНро▓ро┐", "ml": "р┤мр┤╛р╡╝р┤▓р┤┐", "bn": "ржпржм"},
    "sorghum": {"en": "Sorghum", "hi": "рдЬреНрд╡рд╛рд░", "or": "рмЬрнНрн▒рм╛рм░", "te": "р░Ьр▒Кр░ир▒Нр░и", "ta": "роЪрпЛро░рпНроХроорпН", "ml": "р┤╕р╡Лр╡╝р┤Чр┤В", "bn": "ржЬрзЛржпрж╝рж╛рж░"},
    "millet": {"en": "Millet", "hi": "рдмрд╛рдЬрд░рд╛", "or": "рммрм╛рмЬрм░рм╛", "te": "р░╕р░Ьр▒Нр░Ьр░╛", "ta": "роЪро╛роорпИ", "ml": "р┤╕р┤Ьр╡Нр┤Ь", "bn": "ржмржЬрж░рж╛"},
    "soybean": {"en": "Soybean", "hi": "рд╕реЛрдпрд╛рдмреАрди", "or": "рм╕рнЛрнЯрм╛рммрм┐рми", "te": "р░╕р▒Лр░пр░╛р░мр▒Ар░ир▒Н", "ta": "роЪро╛ропрпНрокрпАройрпН", "ml": "р┤╕р╡Лр┤пр┤╛р┤мр╡Ар╡╗", "bn": "рж╕ржпрж╝рж╛ржмрж┐ржи"},
    "groundnut": {"en": "Groundnut", "hi": "рдореВрдБрдЧрдлрд▓реА", "or": "рммрнЗрм░ рмЪрмгрм╛", "te": "р░╡р▒Зр░░р▒Бр░╢р░ир░Ч", "ta": "ро╡рпЗро░рпНроХрпНроХроЯро▓рпИ", "ml": "р┤Ер┤▒р╡Бр┤Хр╡Нр┤Хр╡Н", "bn": "рж╢рзБржБржЯржХрзЛрж▓рж╛"},
    "mustard": {"en": "Mustard", "hi": "рд╕рд░рд╕реЛрдВ", "or": "рм╕рм░рм┐рм╕", "te": "р░Жр░╡р░╛р░▓р▒Б", "ta": "роХроЯро▓рпИрокрпНрокрпВроЪрогро┐", "ml": "р┤ор┤╕р╡Нр┤др┤╛р╡╝р┤бр╡Н", "bn": "рж╕рж░рж┐рж╖рж╛"},
    "cotton": {"en": "Cotton", "hi": "рдХрдкрд╛рд╕", "or": "рмХрмкрм╛рм╕", "te": "р░кр░др▒Нр░др░┐", "ta": "рокро░рпБродрпНродро┐", "ml": "р┤кр┤Яр╡Нр┤Яр╡Б", "bn": "ржХрж╛ржкрж╛рж╕"},
    "sugarcane": {"en": "Sugarcane", "hi": "рдЧрдиреНрдирд╛", "or": "рмЗрмБрмбрм╝рм┐рмЖ рмЧрмирнНрмирм╛", "te": "р░Ър▒Жр░░р░Хр▒Б", "ta": "роХро░рпБроорпНрокрпБ", "ml": "р┤╢р╡╝р┤Хр╡Нр┤Хр┤░р┤Хр╡Нр┤Хр┤Яр┤┐", "bn": "ржЖржЦ"},
    "tobacco": {"en": "Tobacco", "hi": "рддрдорд╛рдХреВ", "or": "рмдрморм╛рмХрнБ", "te": "р░др░ор░╛р░Хр▒Б", "ta": "рокрпБроХрпИропро┐ро▓рпИ", "ml": "р┤др╡Вр┤╡р┤╛р┤▓р┤┐", "bn": "рждрж╛ржорж╛ржХ"},
    "tea": {"en": "Tea", "hi": "рдЪрд╛рдп", "or": "рмЪрм╛", "te": "р░Яр▒А", "ta": "роЯрпА", "ml": "р┤Ър┤╛р┤п", "bn": "ржЪрж╛"},
    "coffee": {"en": "Coffee", "hi": "рдХреЙрдлреА", "or": "рмХрмлрм┐", "te": "р░Хр░╛р░лр▒А", "ta": "роХро╛роГрокро┐", "ml": "р┤Хр╡Лр┤лр┤┐", "bn": "ржХржлрж┐"},
    "banana": {"en": "Banana", "hi": "рдХреЗрд▓рд╛", "or": "рмХрмжрм│рнА", "te": "р░Ер░░р░Яр░┐", "ta": "ро╡ро╛ро┤рпИ", "ml": "р┤╡р┤╛р┤┤р┤кр╡Нр┤кр┤┤р┤В", "bn": "ржХрж▓рж╛"},
    "mango": {"en": "Mango", "hi": "рдЖрдо", "or": "рмЖрморнНрмм", "te": "р░ор░╛р░ор░┐р░бр░┐", "ta": "рооро╛роорпНрокро┤роорпН", "ml": "р┤ор┤╛р┤ор╡Нр┤кр┤┤р┤В", "bn": "ржЖржо"},
    "orange": {"en": "Orange", "hi": "рд╕рдВрддрд░рд╛", "or": "рмХрморм│", "te": "р░Хр░ор░▓р░лр░▓р░В", "ta": "роЖро░роЮрпНроЪрпБ", "ml": "р┤Ур┤▒р┤Юр╡Нр┤Ър╡Н", "bn": "ржХржорж▓рж╛"},
    "apple": {"en": "Apple", "hi": "рд╕реЗрдм", "or": "рм╕рнЗрмм", "te": "р░Жр░кр░┐р░▓р▒Н", "ta": "роЖрокрпНрокро┐ро│рпН", "ml": "р┤Жр┤кр╡Нр┤кр┤┐р╡╛", "bn": "ржЖржкрзЗрж▓"},
    "grapes": {"en": "Grapes", "hi": "рдЕрдВрдЧреВрд░", "or": "рмЖрмЩрнНрмЧрнБрм░", "te": "р░жр▒Нр░░р░╛р░Хр▒Нр░╖", "ta": "родро┐ро░ро╛роЯрпНроЪрпИ", "ml": "р┤жр╡Нр┤░р┤╛р┤Хр╡Нр┤╖", "bn": "ржЖржЩрзБрж░"},
    "coconut": {"en": "Coconut", "hi": "рдирд╛рд░рд┐рдпрд▓", "or": "рмирм╛рмбрм┐рмЖрм│", "te": "р░Хр▒Кр░мр▒Нр░мр░░р░┐", "ta": "родрпЗроЩрпНроХро╛ропрпН", "ml": "р┤др╡Зр┤Щр╡Нр┤Щ", "bn": "ржирж╛рж░рж┐ржХрзЗрж▓"},
    "potato": {"en": "Potato", "hi": "рдЖрд▓реВ", "or": "рмЖрм│рнБ", "te": "р░Жр░▓р▒Бр░Чр░бр▒Нр░б", "ta": "роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ", "ml": "р┤Йр┤░р╡Бр┤│р┤Хр┤┐р┤┤р┤Щр╡Нр┤Щр╡Н", "bn": "ржЖрж▓рзБ"},
    "tomato": {"en": "Tomato", "hi": "рдЯрдорд╛рдЯрд░", "or": "рмЯрморм╛рмЯрм░", "te": "р░Яр░ор▒Лр░Яр░╛", "ta": "родроХрпНроХро╛ро│ро┐", "ml": "р┤др┤Хр╡Нр┤Хр┤╛р┤│р┤┐", "bn": "ржЯржорзЗржЯрзЛ"}
}



translations = {
    "en": {"title":"ЁЯМ╛ AGRIMEN - Smart Crop Recommendation System","welcome":"Welcome to AGRIMEN! This tool predicts the best crop based on soil and climate conditions.","manual_input":"ЁЯУЭ Manual Input Prediction","predict_btn":"ЁЯМ▒ Predict Crop","bulk_prediction":"ЁЯУВ Bulk Prediction (CSV/Excel Upload)","required_cols":"ЁЯСЙ Upload a file with columns: N, P, K, temperature, humidity, ph, rainfall","results":"ЁЯУК Predicted Crop Timetable","download":"ЁЯУе Download as CSV","sowing":"Sowing","harvest":"Harvest","duration":"Duration"},
    "hi": {"title":"ЁЯМ╛ AGRIMEN - рд╕реНрдорд╛рд░реНрдЯ рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдкреНрд░рдгрд╛рд▓реА","welcome":"AGRIMEN рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдпрд╣ рдЙрдкрдХрд░рдг рдорд┐рдЯреНрдЯреА рдФрд░ рдЬрд▓рд╡рд╛рдпреБ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд╕рд░реНрд╡реЛрддреНрддрдо рдлрд╕рд▓ рдХреА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдХрд░рддрд╛ рд╣реИред","manual_input":"ЁЯУЭ рдореИрдиреНрдпреБрдЕрд▓ рдЗрдирдкреБрдЯ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА","predict_btn":"ЁЯМ▒ рдлрд╕рд▓ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдХрд░реЗрдВ","bulk_prediction":"ЁЯУВ рдмрд▓реНрдХ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА (CSV/Excel рдЕрдкрд▓реЛрдб)","required_cols":"ЁЯСЙ рдЗрди рдХреЙрд▓рдо рд╡рд╛рд▓реА рдлрд╝рд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ: N, P, K, temperature, humidity, ph, rainfall","results":"ЁЯУК рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдХреА рдЧрдИ рдлрд╕рд▓ рд╕рдордп рд╕рд╛рд░рдгреА","download":"ЁЯУе CSV рдХреЗ рд░реВрдк рдореЗрдВ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ","sowing":"рдмреБрдЖрдИ","harvest":"рдХрдЯрд╛рдИ","duration":"рдЕрд╡рдзрд┐"},
    "or": {"title":"ЁЯМ╛ AGRIMEN - рм╕рнНрморм╛рм░рнНрмЯ рмлрм╕рм▓ рм╕рнБрмкрм╛рм░рм┐рм╢ рмкрнНрм░рмгрм╛рм│рнА","welcome":"AGRIMEN рмХрнБ рм╕рнНрн▒рм╛рмЧрмд! рмПрм╣рм┐ рмЙрмкрмХрм░рмг рморм╛рмЯрм┐ рмПрммрмВ рмЬрм│рммрм╛рнЯрнБ рмЙрмкрм░рнЗ рмЖрмзрм╛рм░ рмХрм░рм┐ рмнрм▓ рмлрм╕рм▓ рмкрнВрм░рнНрммрм╛рмирнБрморм╛рми рмХрм░рнЗред","manual_input":"ЁЯУЭ рморм╛рмирнБрмЖрм▓рнН рмЗрмирмкрнБрмЯ рмкрнВрм░рнНрммрм╛рмирнБрморм╛рми","predict_btn":"ЁЯМ▒ рмлрм╕рм▓ рмкрнВрм░рнНрммрм╛рмирнБрморм╛рми рмХрм░рмирнНрмдрнБ","bulk_prediction":"ЁЯУВ рммрм▓рнНрмХ рмкрнВрм░рнНрммрм╛рмирнБрморм╛рми (CSV/Excel рмЕрмкрм▓рнЛрмбрнН)","required_cols":"ЁЯСЙ рмПрм╣рм┐ рмХрм▓рмормЧрнБрмбрм┐рмХ рм╕рм╣рм┐рмд рмлрм╛рмЗрм▓рнН рмЕрмкрм▓рнЛрмбрнН рмХрм░рмирнНрмдрнБ: N, P, K, temperature, humidity, ph, rainfall","results":"ЁЯУК рмкрнВрм░рнНрммрм╛рмирнБрморм╛рми рм╣рнЛрмЗрмерм┐рммрм╛ рмлрм╕рм▓ рмЯрм╛рмЗрмормЯрнЗрммрм▓рнН","download":"ЁЯУе CSV рмнрм╛рммрм░рнЗ рмбрм╛рмЙрмирм▓рнЛрмбрнН рмХрм░рмирнНрмдрнБ","sowing":"рммрм┐рмЖрм░ рморм╕рм┐рммрм╛","harvest":"рмХрм╛рмЯрмирм┐","duration":"рморм┐рнЯрм╛рмж"},
    "te": {"title":"ЁЯМ╛ AGRIMEN - р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░кр░Вр░Я р░╕р░┐р░лр░╛р░░р░╕р▒Б р░╡р▒Нр░пр░╡р░╕р▒Нр░е","welcome":"AGRIMEN р░Хр░┐ р░╕р▒Нр░╡р░╛р░Чр░др░В! р░И р░╕р░╛р░зр░ир░В р░ир▒Зр░▓ р░ор░░р░┐р░пр▒Б р░╡р░╛р░др░╛р░╡р░░р░г р░кр░░р░┐р░╕р▒Нр░ер░┐р░др▒Бр░▓ р░Жр░зр░╛р░░р░Вр░Чр░╛ р░Йр░др▒Нр░др░о р░кр░Вр░Яр░ир▒Б р░Ер░Вр░Ър░ир░╛ р░╡р▒Зр░╕р▒Нр░др▒Бр░Вр░жр░┐.","manual_input":"ЁЯУЭ р░ор░╛р░ир▒Нр░пр▒Бр░╡р░▓р▒Н р░Зр░ир▒НтАМр░кр▒Бр░Яр▒Н р░Ер░Вр░Ър░ир░╛","predict_btn":"ЁЯМ▒ р░кр░Вр░Яр░ир▒Б р░Ер░Вр░Ър░ир░╛ р░╡р▒Зр░пр░Вр░бр░┐","bulk_prediction":"ЁЯУВ р░мр░▓р▒Нр░Хр▒Н р░Ер░Вр░Ър░ир░╛ (CSV/Excel р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н)","required_cols":"ЁЯСЙ р░И р░Хр░╛р░▓р░ор▒НтАМр░▓р░др▒Л р░лр▒Ир░▓р▒НтАМр░ир░┐ р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐: N, P, K, temperature, humidity, ph, rainfall","results":"ЁЯУК р░Ер░Вр░Ър░ир░╛ р░╡р▒Зр░╕р░┐р░и р░кр░Вр░Я р░╖р▒Жр░бр▒Нр░пр▒Вр░▓р▒Н","download":"ЁЯУе CSV р░Чр░╛ р░бр▒Мр░ир▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐","sowing":"р░╡р░┐р░др▒Нр░др░ир░В","harvest":"р░Хр░др▒Нр░др▒Жр░░","duration":"р░╡р▒Нр░пр░╡р░зр░┐"},
    "ta": {"title":"ЁЯМ╛ AGRIMEN - ро╕рпНрооро╛ро░рпНроЯрпН рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИ роЕроорпИрокрпНрокрпБ","welcome":"AGRIMEN-роХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН! роЗроирпНрод роХро░рпБро╡ро┐ роорогрпН рооро▒рпНро▒рпБроорпН роХро╛ро▓роиро┐ро▓рпИропро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН роЪро┐ро▒роирпНрод рокропро┐ро░рпИ роХрогро┐роХрпНроХро┐ро▒родрпБ.","manual_input":"ЁЯУЭ роХрпИропрпЗроЯрпБ роЙро│рпНро│рпАроЯрпНроЯрпБ роХрогро┐рокрпНрокрпБ","predict_btn":"ЁЯМ▒ рокропро┐ро░рпИ роХрогро┐роХрпНроХро╡рпБроорпН","bulk_prediction":"ЁЯУВ роорпКродрпНрод роХрогро┐рокрпНрокрпБ (CSV/Excel рокродро┐ро╡рпЗро▒рпНро▒роорпН)","required_cols":"ЁЯСЙ роЗроирпНрод роирпЖроЯрпБро╡ро░ро┐роЪрпИроХро│рпБроЯройрпН роХрпЛрокрпНрокрпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН: N, P, K, temperature, humidity, ph, rainfall","results":"ЁЯУК роХрогро┐роХрпНроХрокрпНрокроЯрпНроЯ рокропро┐ро░рпН роЕроЯрпНроЯро╡рогрпИ","download":"ЁЯУе CSV роЖроХ рокродро┐ро╡ро┐ро▒роХрпНроХро╡рпБроорпН","sowing":"ро╡ро┐родрпИрокрпНрокродрпБ","harvest":"рокро┤рпБрокрпНрокрпБ","duration":"роХро╛ро▓роорпН"},
    "ml": {"title":"ЁЯМ╛ AGRIMEN - р┤╕р╡Нр┤ор┤╛р╡╝р┤Яр╡Нр┤Яр╡Н р┤╡р┤┐р┤│ р┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢ р┤╕р┤Вр┤╡р┤┐р┤зр┤╛р┤ир┤В","welcome":"AGRIMEN-р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В! р┤И р┤Йр┤кр┤Хр┤░р┤гр┤В р┤ор┤гр╡Нр┤гр┤┐р┤ир╡Нр┤▒р╡Жр┤пр╡Бр┤В р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤пр╡Бр┤Яр╡Жр┤пр╡Бр┤В р┤Ер┤Яр┤┐р┤╕р╡Нр┤ер┤╛р┤ир┤др╡Нр┤др┤┐р╡╜ р┤ор┤┐р┤Хр┤Ър╡Нр┤Ъ р┤╡р┤┐р┤│ р┤кр╡Нр┤░р┤╡р┤Ър┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б.","manual_input":"ЁЯУЭ р┤ор┤╛р┤ир╡Бр┤╡р╡╜ р┤Зр╡╗р┤кр╡Бр┤Яр╡Нр┤Яр╡Н р┤кр╡Нр┤░р┤╡р┤Ър┤ир┤В","predict_btn":"ЁЯМ▒ р┤╡р┤┐р┤│ р┤кр╡Нр┤░р┤╡р┤Ър┤┐р┤Хр╡Нр┤Хр╡Бр┤Х","bulk_prediction":"ЁЯУВ р┤мр╡╛р┤Хр╡Нр┤Хр╡Н р┤кр╡Нр┤░р┤╡р┤Ър┤ир┤В (CSV/Excel р┤Ер┤кр╡Нр┤▓р╡Лр┤бр╡Н)","required_cols":"ЁЯСЙ р┤И р┤Хр╡Лр┤│р┤Щр╡Нр┤Щр┤│р╡Лр┤Яр╡Бр┤Хр╡Вр┤Яр┤┐р┤п р┤лр┤пр╡╜ р┤Ер┤кр╡Нр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х: N, P, K, temperature, humidity, ph, rainfall","results":"ЁЯУК р┤кр╡Нр┤░р┤╡р┤Ър┤┐р┤Ър╡Нр┤Ъ р┤╡р┤┐р┤│ р┤╖р╡Жр┤бр╡Нр┤пр╡Вр╡╛","download":"ЁЯУе CSV р┤Жр┤пр┤┐ р┤бр╡Чр╡║р┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х","sowing":"р┤др╡Ир┤╡р╡Н","harvest":"р┤кр╡Кр┤Хр╡Нр┤Хр┤В","duration":"р┤Хр┤╛р┤▓р┤╛р┤╡р┤зр┤┐"},
    "bn": {"title":"ЁЯМ╛ AGRIMEN - рж╕рзНржорж╛рж░рзНржЯ ржлрж╕рж▓ рж╕рзБржкрж╛рж░рж┐рж╢ ржмрзНржпржмрж╕рзНржерж╛","welcome":"AGRIMEN-ржП рж╕рзНржмрж╛ржЧрждржо! ржПржЗ ржЯрзБрж▓ ржорж╛ржЯрж┐ ржУ ржЬрж▓ржмрж╛ржпрж╝рзБрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ рж╕рзЗрж░рж╛ ржлрж╕рж▓ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ ржжрзЗржпрж╝ред","manual_input":"ЁЯУЭ ржорзНржпрж╛ржирзБржпрж╝рж╛рж▓ ржЗржиржкрзБржЯ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕","predict_btn":"ЁЯМ▒ ржлрж╕рж▓ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ ржХрж░рзБржи","bulk_prediction":"ЁЯУВ ржмрж╛рж▓рзНржХ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ (CSV/Excel ржЖржкрж▓рзЛржб)","required_cols":"ЁЯСЙ ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд ржХрж▓рж╛ржо рж╕рж╣ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржи: N, P, K, temperature, humidity, ph, rainfall","results":"ЁЯУК ржкрзВрж░рзНржмрж╛ржнрж╛рж╕рж┐ржд ржлрж╕рж▓ рж╕ржоржпрж╝рж╕рзВржЪрж┐","download":"ЁЯУе CSV рж╣рж┐рж╕рж╛ржмрзЗ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи","sowing":"ржмржкржи","harvest":"ржХрж╛ржЯрж╛","duration":"рж╕ржоржпрж╝ржХрж╛рж▓"}
}




st.set_page_config(page_title="AGRIMEN", page_icon="ЁЯМ╛", layout="wide")

# Dropdown shows language names in English only
lang_options = {"en":"English","hi":"Hindi","or":"Odia","te":"Telugu","ta":"Tamil","ml":"Malayalam","bn":"Bengali"}
lang = st.sidebar.selectbox("ЁЯМР Choose Language", options=list(lang_options.keys()), format_func=lambda x: lang_options[x])
T = translations[lang]

st.title(T["title"])
st.write(T["welcome"])



col1, col2, col3 = st.columns(3)
with col1:
    N = st.number_input("Nitrogen (N)", 0, 200, 50)
    P = st.number_input("Phosphorus (P)", 0, 200, 50)
    K = st.number_input("Potassium (K)", 0, 200, 50)
with col2:
    temperature = st.number_input("Temperature (┬░C)", -10.0, 60.0, 25.0)
    humidity = st.number_input("Humidity (%)", 0.0, 100.0, 50.0)
with col3:
    ph = st.number_input("pH", 0.0, 14.0, 6.5)
    rainfall = st.number_input("Rainfall (mm)", 0.0, 500.0, 100.0)

if st.button(T["predict_btn"]):
    data = scaler.transform([[N, P, K, temperature, humidity, ph, rainfall]])
    pred = model.predict(data)
    crop_en = le.inverse_transform(pred)[0]
    crop_local = crop_translations.get(crop_en.lower(), {}).get(lang, crop_en)
    st.success(f"тЬЕ {T['results']}: {crop_local}")

    if crop_en.lower() in crop_info:
        info = crop_info[crop_en.lower()]
        st.info(f"ЁЯУЕ **{T['sowing']}:** {info['sowing']} | ЁЯМ╛ **{T['harvest']}:** {info['harvest']} | тП│ **{T['duration']}:** {info['duration']}")



st.subheader(T["bulk_prediction"])
st.write(T["required_cols"])
file = st.file_uploader("Upload CSV or Excel", type=["csv","xlsx"])

if file:
    if file.name.endswith(".csv"):
        df = pd.read_csv(file)
    else:
        df = pd.read_excel(file)

    input_data = scaler.transform(df[["N","P","K","temperature","humidity","ph","rainfall"]])
    preds = model.predict(input_data)
    df["Predicted Crop"] = le.inverse_transform(preds)
    df["Predicted Crop"] = df["Predicted Crop"].apply(lambda x: crop_translations.get(x.lower(), {}).get(lang,x))

    st.write(T["results"])
    st.dataframe(df)

    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button(label=T["download"], data=csv, file_name="predicted_crops.csv", mime="text/csv")
